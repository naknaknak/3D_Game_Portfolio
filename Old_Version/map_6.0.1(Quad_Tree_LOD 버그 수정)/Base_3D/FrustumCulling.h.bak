#pragma once
#include "BoundingVolume.h"


class FrustumCulling
{
public:
	FrustumCulling( );
	~FrustumCulling( );

	void Initialize( );
	void Update( );
	bool IsInFrustum(BoundingSphere* target);
	bool IsInFrustum(D3DXVECTOR3 * target);
	bool IsInFrustum(D3DXVECTOR3 * target, float radius);

	void SetPerspective(const float fFOV, const float fViewAspect, const float fNearZ, const float fFarZ);
	void Build(const D3DXVECTOR3 & vEye, const D3DXVECTOR3 & vForward, const D3DXVECTOR3 & vRight, const D3DXVECTOR3 & vUp);
	bool IsInPosition(D3DXVECTOR3 * target);
	bool IsInSphere(D3DXVECTOR3 * target, float radius);

private:
	std::vector<D3DXVECTOR3> projectionSpacePointArray;
	std::vector<D3DXPLANE> frustumPlaneArray;

	// Fast Frustum
	D3DXVECTOR3 m_vPos;

	float m_fRightFactor;
	float m_fUpFactor;
	float m_fNear;
	float m_fFar;

	D3DXVECTOR3 m_vEyePosition;
	D3DXVECTOR3 m_vForward;
	D3DXVECTOR3 m_vRight;
	D3DXVECTOR3 m_vUp;


};

